<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpenPIKA</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pingchuan.ma/"/>
  <updated>2017-08-06T10:27:03.000Z</updated>
  <id>https://pingchuan.ma/</id>
  
  <author>
    <name>Pingchuan Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Install Nginx on Ubuntu</title>
    <link href="https://pingchuan.ma/install-nginx-on-ubuntu/"/>
    <id>https://pingchuan.ma/install-nginx-on-ubuntu/</id>
    <published>2017-08-06T08:22:22.000Z</published>
    <updated>2017-08-06T10:27:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>To set up a website based on my VPS, it is necessary to choose a web server which is capable for holding my traffic. When I am a high school boy, I tried to build my personal website on WordPress based on Apache, but I found they are both too extravagant for me. This time, I chose Nginx to hold my website.</p>
<a id="more"></a>
<h2 id="What-is-Nginx"><a href="#What-is-Nginx" class="headerlink" title="What is Nginx?"></a>What is Nginx?</h2><p><a href="https://www.nginx.com/" target="_blank" rel="external">Nginx</a> is one of the most popular web servers in the world and is responsible for hosting some of the largest and highest-traffic sites on the Internet. It is more resource-friendly than Apache in most cases and can be used as a web server or a reverse proxy.</p>
<h2 id="Why-Nginx"><a href="#Why-Nginx" class="headerlink" title="Why Nginx?"></a>Why Nginx?</h2><p>In fact, I have tens of millions of choices, for example, Nginx, Apache, lighttpd, etc. But in my opinion, Nginx is a light-weighted web server which perfectly fits personal users like me. Actually, last semester I enrolled in a JAVA Programming Language course, and I suffered a lot from Apache there. So, this time I tried Nginx out and surprised by its usability.</p>
<h2 id="How-to-make-it"><a href="#How-to-make-it" class="headerlink" title="How to make it?"></a>How to make it?</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul>
<li>An Internet hosting, such as VPS or cloud hosting. And, it should be running Ubuntu.</li>
<li>A non-root user with the right to <code>sudo</code>.</li>
</ul>
<p>My <a href="https://m.do.co/c/c037166332e8" title="Click here to get $10 in credit." target="_blank" rel="external">DigitalOcean</a> VPS is installed with Ubuntu 16.04 LTS x64. This post will also be based on it.</p>
<h3 id="Install-Nginx"><a href="#Install-Nginx" class="headerlink" title="Install Nginx"></a>Install Nginx</h3><p>Nginx is so popular that Ubuntu’s default repositories included it:</p>
<pre><code class="bash">$ sudo apt-get update
$ sudo apt-get install nginx
</code></pre>
<h3 id="Configure-the-Firewall-optional"><a href="#Configure-the-Firewall-optional" class="headerlink" title="Configure the Firewall (optional)"></a>Configure the Firewall (optional)</h3><p>To secure our server, I highly recommend that set a firewall, such as <a href="https://help.ubuntu.com/community/UFW" target="_blank" rel="external">Uncomplicated Firewall</a> (<code>ufw</code>) to protect it. I will not include the initialization of <code>ufw</code> here.</p>
<p>Let’s check the applications list inside <code>ufw</code>:</p>
<pre><code class="bash">$ sudo ufw app list
</code></pre>
<p>Then there should be something showed up like:</p>
<pre><code class="bash">Available applications:
  Nginx Full
  Nginx HTTP
  Nginx HTTPS
  OpenSSH
  ...
</code></pre>
<p>There are three profiles registered in Nginx:</p>
<ul>
<li><strong>Nginx Full</strong>: This profile opens both port 80 (normal, unencrypted web traffic) and port 443 (TLS/SSL encrypted traffic)</li>
<li><strong>Nginx HTTP</strong>: This profile opens only port 80 (normal, unencrypted web traffic)</li>
<li><strong>Nginx HTTPS</strong>: This profile opens only port 443 (TLS/SSL encrypted traffic)</li>
</ul>
<p>For example, I am using both HTTP and HTTPS now so I will type:</p>
<pre><code class="bash">$ sudo ufw allow &#39;Nginx Full&#39;
</code></pre>
<p>Then you can verify it by typing:</p>
<pre><code class="bash">$ sudo ufw status
</code></pre>
<p>Then the status of <code>ufw</code> shows up:</p>
<pre><code class="bash">Status: active

To                  Action      From
--                  ------      ----
OpenSSH             ALLOW       Anywhere                  
Nginx Full          ALLOW       Anywhere                  
OpenSSH (v6)        ALLOW       Anywhere (v6)             
Nginx Full (v6)     ALLOW       Anywhere (v6)
</code></pre>
<h3 id="Is-it-working"><a href="#Is-it-working" class="headerlink" title="Is it working?"></a>Is it working?</h3><p>To check if Nginx is running, we should type:</p>
<pre><code class="bash">$ systemctl status nginx
</code></pre>
<p>If it IS running, the output should be something like:</p>
<pre><code class="bash">● nginx.service - A high performance web server and a reverse proxy server
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
   Active: active (running) since Sun 2017-08-06 16:22:46 HKT; 1h 3min ago
  Process: 1611 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
  Process: 1498 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0
 Main PID: 1615 (nginx)
    Tasks: 2
   Memory: 11.7M
      CPU: 121ms
   CGroup: /system.slice/nginx.service
           ├─1615 nginx: master process /usr/sbin/nginx -g daemon on; master_process on
           └─1616 nginx: worker process
</code></pre>
<p>This is mine, and since it is not identical for everyone, yours should differ from my version. However, if you see <code>running</code> on the screen, you made it.</p>
<p>If you have got your IP address or have assigned your domain name to your IP address with DNS’s help, go and have a look at it through browser.</p>
<pre><code>http://server_domain_or_IP
</code></pre><p>Then here is the default welcome page of Nginx:</p>
<div align="center"><br><img src="/install-nginx-on-ubuntu/nginx_default_page.png" alt="Nginx Default Page" title="Nginx Default Page"><br></div>  

<h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><p>Now that you have your web server up and running, we can go over some basic management commands.</p>
<p>To stop your web server, you can type:</p>
<pre><code class="bash">$ sudo systemctl stop nginx
</code></pre>
<p>To start the web server when it is stopped, type:</p>
<pre><code class="bash">$ sudo systemctl start nginx
</code></pre>
<p>To stop and then start the service again, type:</p>
<pre><code class="bash">$ sudo systemctl restart nginx
</code></pre>
<p>If you are simply making configuration changes, Nginx can often reload without dropping connections. To do this, this command can be used:</p>
<pre><code class="bash">$ sudo systemctl reload nginx
</code></pre>
<p>By default, Nginx is configured to start automatically when the server boots. If this is not what you want, you can disable this behavior by typing:</p>
<pre><code class="bash">$ sudo systemctl disable nginx
</code></pre>
<p>To re-enable the service to start up at boot, you can type:</p>
<pre><code class="bash">$ sudo systemctl enable nginx
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To set up a website based on my VPS, it is necessary to choose a web server which is capable for holding my traffic. When I am a high school boy, I tried to build my personal website on WordPress based on Apache, but I found they are both too extravagant for me. This time, I chose Nginx to hold my website.&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="https://pingchuan.ma/categories/network/"/>
    
    
      <category term="Linux" scheme="https://pingchuan.ma/tags/linux/"/>
    
      <category term="Network" scheme="https://pingchuan.ma/tags/network/"/>
    
      <category term="Ubuntu" scheme="https://pingchuan.ma/tags/ubuntu/"/>
    
      <category term="Nginx" scheme="https://pingchuan.ma/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Free Free Internet</title>
    <link href="https://pingchuan.ma/free-free-internet/"/>
    <id>https://pingchuan.ma/free-free-internet/</id>
    <published>2017-08-03T03:46:22.000Z</published>
    <updated>2017-08-06T10:29:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a Chinese university student, I am enjoying a special-designed Internet as we all know. Needless to say that it is especially difficult for me to accomplish my research with Google or Wikipedia. Additionally, my university is using a tolling network, whose Internet fee is about $0.3/GB. It is not a big deal but it bothered me anyway.</p>
<p>Despite the inconvenience discussed above, it is totally free to get online through IPv6. Apparently, if I convert my IPv4 network traffic into IPv6 one and introduce a hosting server to agent it, all problem will be settled.</p>
<p>In a nutshell, I am going to:</p>
<ol>
<li>get online <strong>free</strong> (free of charge) through IPv6;</li>
<li>reach out for <strong>free</strong> (unrestricted) Internet;</li>
</ol>
<a id="more"></a>
<h2 id="What-is-Shadowsocks"><a href="#What-is-Shadowsocks" class="headerlink" title="What is Shadowsocks?"></a>What is Shadowsocks?</h2><p>According to its GitHub description, <a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="external">shadowsocks</a> works as a fast tunnel proxy with several friendly features:</p>
<ul>
<li>TCP &amp; UDP support</li>
<li>User management API</li>
<li>TCP Fast Open</li>
<li>Workers and graceful restart</li>
<li>Destination IP blacklist</li>
</ul>
<p>As for many people, this multi-featured tool plays an indispensable role in research and study. In particular, it serves me well in network testing and website boosting.</p>
<h2 id="Why-Shadowsocks"><a href="#Why-Shadowsocks" class="headerlink" title="Why Shadowsocks?"></a>Why Shadowsocks?</h2><p>Technically speaking, I did not really figure out how it works. However, to my experience, shadowsocks can maximum my network <strong>securely</strong>. Moreover, I find it friendly and easy to build for a Linux newbie like me. As a result, I chose shadowsocks.</p>
<p>Rumor has it that the censorship is fighting against shadowsocks, but I believe that <strong>technology and science commit no crime</strong>. I am not good at memorization, so I recorded my building steps for further reference.</p>
<h2 id="How-to-Make-it"><a href="#How-to-Make-it" class="headerlink" title="How to Make it?"></a>How to Make it?</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul>
<li>An Internet hosting, such as VPS or cloud hosting. <em>DigitalOcean’s VPS service is good enough for me. I would not like to discuss the choosing of hosting service here.</em></li>
</ul>
<p>My <a href="https://m.do.co/c/c037166332e8" title="Click here to get $10 in credit." target="_blank" rel="external">DigitalOcean</a> VPS is installed with Ubuntu 16.04 LTS x64. This post will also be based on it.</p>
<h3 id="Install-pip"><a href="#Install-pip" class="headerlink" title="Install pip"></a>Install pip</h3><p>I am building with python3, so I need pip for python3. Omit it if you have installed it.</p>
<pre><code class="bash">$ sudo apt-get update
$ sudo apt-get install python3-pip
</code></pre>
<h3 id="Install-shadowsocks"><a href="#Install-shadowsocks" class="headerlink" title="Install shadowsocks"></a>Install shadowsocks</h3><p>The author of shadowsocks stopped the maintenance in official pip, so we get the latest version via git.</p>
<pre><code class="bash">$ sudo pip3 install git+https://github.com/shadowsocks/shadowsocks.git@master
</code></pre>
<p>To look up the version of shadowsocks, we should use this command:</p>
<pre><code class="bash">$ sudo ssserver --version
</code></pre>
<p>If shadowsocks has been installed successfully, it should show this:</p>
<pre><code class="bash">Shadowsocks 3.0.0
</code></pre>
<h3 id="Implement-Safer-Encryption-Method-optional"><a href="#Implement-Safer-Encryption-Method-optional" class="headerlink" title="Implement Safer Encryption Method (optional)"></a>Implement Safer Encryption Method (optional)</h3><p>According to the <a href="https://github.com/shadowsocks/shadowsocks/wiki/Encryption" target="_blank" rel="external">introduction</a> of encryption:</p>
<blockquote>
<p><code>rc4-md5</code> is a safe, fast encryption that use different key per connection. It is recommended for OpenWRT routers.</p>
<p><code>salsa20</code> and <code>chacha20</code> are fast stream ciphers. Optimized <code>salsa20</code> implementation on x86_64 is even 2x faster than <code>rc4</code> (but slightly slower on ARM).</p>
</blockquote>
<p>For me, I chose chacha20 as my encryption method. Let’s install the requirements:</p>
<pre><code class="bash">$ sudo apt-get install python-m2crypto
$ sudo apt-get install build-essential
$ wget https://github.com/jedisct1/libsodium/releases/download/1.0.13/libsodium-1.0.13.tar.gz
$ sudo tar xf libsodium-1.0.13.tar.gz &amp;&amp; cd libsodium-1.0.13
$ sudo ./configure &amp;&amp; sudo make -j2
$ sudo make install
$ sudo ldconfig
</code></pre>
<h3 id="Work-with-Configuration-File"><a href="#Work-with-Configuration-File" class="headerlink" title="Work with Configuration File"></a>Work with Configuration File</h3><p>To configure the shadowsocks, we create a configuration file:</p>
<pre><code class="bash">$ sudo vim /etc/shadowsocks.json
</code></pre>
<p>Then we fill our configuration file with details: (do not forget to change the ports and passwords)</p>
<pre><code class="json">{
    &quot;server&quot;: &quot;::&quot;,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;: 1080,
    &quot;port_password&quot;: {
         &quot;10001&quot;: &quot;password1&quot;,
         &quot;10002&quot;: &quot;password2&quot; 
    },
    &quot;timeout&quot;: 300,
    &quot;method&quot;: &quot;chacha20&quot;,
    &quot;fast_open&quot;: false
}
</code></pre>
<p>We set the value of <code>server</code> to <code>::</code> in order to ask shadowsocks to receive the traffic from both IPv4 and <strong>IPv6</strong>. <code>method</code> means the encryption method you want shadowsocks to arm with. And <code>fast_open</code> field will be discuss later in the optimization.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>To run shadowsocks in the background:</p>
<pre><code class="bash">$ sudo ssserver -c /etc/shadowsocks.json -d start
</code></pre>
<p>To stop it:</p>
<pre><code class="bash">$ sudo ssserver -d stop
</code></pre>
<h3 id="Run-with-Startup"><a href="#Run-with-Startup" class="headerlink" title="Run with Startup"></a>Run with Startup</h3><p>Ubuntu 16.04 introduced a new module named Systemd to manage system and service. We are using the fresh features here.</p>
<p>Create the management file of shadowsocks:</p>
<pre><code class="bash">$ sudo vim /etc/systemd/system/shadowsocks-server.service
</code></pre>
<p>Then paste the configuration content:</p>
<pre><code>[Unit]
Description = Shadowsocks Server
After = network.target

[Service]
ExecStart = /usr/local/bin/ssserver -c /etc/shadowsocks.json
Restart = on-abort

[Install]
WantedBy = multi-user.target
</code></pre><p>So now we get a new approach to run shadowsocks:</p>
<pre><code class="bash">$ sudo systemctl start shadowsocks-server
</code></pre>
<p>Make shadowsocks run with startup in case of accidentally crash and reboot:</p>
<pre><code class="bash">$ sudo systemctl enable shadowsocks-server
</code></pre>
<h2 id="Optimizations"><a href="#Optimizations" class="headerlink" title="Optimizations"></a>Optimizations</h2><p>Here are some trick to optimize the performance of shadowsocks.</p>
<h3 id="Enable-BBR"><a href="#Enable-BBR" class="headerlink" title="Enable BBR"></a>Enable BBR</h3><p>BBR stands for a brand new congestion control algorithm developed by Google. It can boost our server to a large extent.</p>
<h4 id="Update-Linux-Kernel"><a href="#Update-Linux-Kernel" class="headerlink" title="Update Linux Kernel"></a>Update Linux Kernel</h4><p>BBR is impossible to enable as long as Linux kernel version is lower than 4.9.0. So firstly let’s check the version of kernel:</p>
<pre><code class="bash">$ uname -r
</code></pre>
<p>If it shows a version compatible with BBR, please skip to “Edit Configuration File”.</p>
<p>Go to a temporary download folder with command <code>cd</code> to prepare for kernel. Then download the latest stable kernel from <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="external">kernel PPA webpage</a>. For example, I chose v4.12.4 mainline build for amd64 succeeded:</p>
<pre><code class="bash">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.4/linux-headers-4.12.4-041204_4.12.4-041204.201707271932_all.deb
$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.4/linux-headers-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb
$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.4/linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb
</code></pre>
<p>Then we install the kernels we downloaded:</p>
<pre><code class="bash">$ sudo dpkg -i *.deb
</code></pre>
<p>Then we should <code>reboot</code> and delete the old kernels:</p>
<pre><code class="bash">$ sudo purge-old-kernels
</code></pre>
<h4 id="Edit-Configuration-File"><a href="#Edit-Configuration-File" class="headerlink" title="Edit Configuration File"></a>Edit Configuration File</h4><p>Let’s check if we have already switched BBR on:</p>
<pre><code class="bash">$ sudo lsmod | grep bbr
</code></pre>
<p>If there is not <code>tcp_bbr</code> in the results, we follow this to enable it:</p>
<pre><code class="bash">$ sudo echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf
$ sudo echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf
</code></pre>
<p>Then we save the configuration file and make it go into effort:</p>
<pre><code class="bash">$ sudo sysctl -p
</code></pre>
<h4 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h4><pre><code class="bash">$ sysctl net.ipv4.tcp_available_congestion_control
$ sysctl net.ipv4.tcp_congestion_control
</code></pre>
<p>If the results both contain <code>bbr</code>, we are sure that BBR has been enabled.</p>
<h3 id="Optimize-I-O"><a href="#Optimize-I-O" class="headerlink" title="Optimize I/O"></a>Optimize I/O</h3><p>To make it, we create a configuration file:</p>
<pre><code class="bash">$ sudo vim /etc/sysctl.d/local.conf
</code></pre>
<p>Then we fill it with some settings:</p>
<pre><code># max open files
fs.file-max = 51200
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096

# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1

# for low-latency network, use cubic instead
# net.ipv4.tcp_congestion_control = cubic
</code></pre><p>Then we make it come into effort:</p>
<pre><code class="bash">$ sudo sysctl --system
</code></pre>
<p>Then edit the <code>shadowsocks-server.service</code> file above:</p>
<pre><code class="bash">$ sudo vim /etc/systemd/system/shadowsocks-server.service
</code></pre>
<p>Insert a line before <code>ExecStart</code>:</p>
<pre><code>ExecStartPre = /bin/sh -c &#39;ulimit -n 51200&#39;
</code></pre><p>Overall <code>shadowsocks-server.service</code>:</p>
<pre><code>[Unit]
Description = Shadowsocks Server
After = network.target

[Service]
ExecStartPre = /bin/sh -c &#39;ulimit -n 51200&#39;
ExecStart = /usr/local/bin/ssserver -c /etc/shadowsocks.json
Restart = on-abort

[Install]
WantedBy = multi-user.target
</code></pre><p>Make them come into effort:</p>
<pre><code class="bash">$ sudo systemctl daemon-reload
$ sudo systemctl restart shadowsocks-server
</code></pre>
<h3 id="Enable-TCP-Fast-Open"><a href="#Enable-TCP-Fast-Open" class="headerlink" title="Enable TCP Fast Open"></a>Enable TCP Fast Open</h3><p>TCP Fast Open is designed to reduce delay between server and clients. Now it is the time to enable it.</p>
<p>Edit our shadowsocks configuration file:</p>
<pre><code class="bash">$ sudo vim /etc/shadowsocks.json
</code></pre>
<p>Then we set the value of <code>fast_open</code> to <code>true</code>. Restart shadowsocks to validate your changes.</p>
<pre><code class="bash">$ sudo systemctl restart shadowsocks-server
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a Chinese university student, I am enjoying a special-designed Internet as we all know. Needless to say that it is especially difficult for me to accomplish my research with Google or Wikipedia. Additionally, my university is using a tolling network, whose Internet fee is about $0.3/GB. It is not a big deal but it bothered me anyway.&lt;/p&gt;
&lt;p&gt;Despite the inconvenience discussed above, it is totally free to get online through IPv6. Apparently, if I convert my IPv4 network traffic into IPv6 one and introduce a hosting server to agent it, all problem will be settled.&lt;/p&gt;
&lt;p&gt;In a nutshell, I am going to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get online &lt;strong&gt;free&lt;/strong&gt; (free of charge) through IPv6;&lt;/li&gt;
&lt;li&gt;reach out for &lt;strong&gt;free&lt;/strong&gt; (unrestricted) Internet;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Network" scheme="https://pingchuan.ma/categories/network/"/>
    
    
      <category term="Python" scheme="https://pingchuan.ma/tags/python/"/>
    
      <category term="Linux" scheme="https://pingchuan.ma/tags/linux/"/>
    
      <category term="Network" scheme="https://pingchuan.ma/tags/network/"/>
    
      <category term="Ubuntu" scheme="https://pingchuan.ma/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pingchuan.ma/hello-world/"/>
    <id>https://pingchuan.ma/hello-world/</id>
    <published>2017-08-02T15:04:10.000Z</published>
    <updated>2017-08-06T08:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This is my first post!</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;This is my first post!&lt;/em&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Uncategorized" scheme="https://pingchuan.ma/categories/uncategorized/"/>
    
    
  </entry>
  
</feed>
