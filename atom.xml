<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpenPIKA</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pingchuan.ma/"/>
  <updated>2017-08-05T14:14:31.000Z</updated>
  <id>https://pingchuan.ma/</id>
  
  <author>
    <name>Pingchuan Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Free Free Internet</title>
    <link href="https://pingchuan.ma/free-free-internet/"/>
    <id>https://pingchuan.ma/free-free-internet/</id>
    <published>2017-08-03T03:46:22.000Z</published>
    <updated>2017-08-05T14:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>As a Chinese university student, I am enjoying a special-designed Internet as we all know. Needless to say that it is especially difficult for me to accomplish my research with Google or Wikipedia. Additionally, my university is using a tolling network, whose Internet fee is about $0.3/GB. It is not a big deal but it bothered me anyway.</p>
<p>Despite the inconvenience discussed above, it is totally free to get online through IPv6. Apparently, if I convert my IPv4 network traffic into IPv6 one and introduce a hosting server to agent it, all problem will be settled.</p>
<p>In a nutshell, I am going to:</p>
<ol>
<li>get online <strong>free</strong> (free of charge) through IPv6;</li>
<li>reach out for <strong>free</strong> (unrestricted) Internet;</li>
</ol>
<a id="more"></a>
<h2 id="What-is-Shadowsocks"><a href="#What-is-Shadowsocks" class="headerlink" title="What is Shadowsocks?"></a>What is Shadowsocks?</h2><p>According to its <a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="external">GitHub</a> description, shadowsocks works as a fast tunnel proxy with several friendly features:</p>
<ul>
<li>TCP &amp; UDP support</li>
<li>User management API</li>
<li>TCP Fast Open</li>
<li>Workers and graceful restart</li>
<li>Destination IP blacklist</li>
</ul>
<p>As for many people, this multi-featured tool plays an indispensable role in research and study. In particular, it serves me well in network testing and website boosting.</p>
<h2 id="Why-Shadowsocks"><a href="#Why-Shadowsocks" class="headerlink" title="Why Shadowsocks?"></a>Why Shadowsocks?</h2><p>Technically speaking, I did not really figure out how it works. However, to my experience, shadowsocks can maximum my network <strong>securely</strong>. Moreover, I find it friendly and easy to build for a Linux newbie like me. As a result, I chose shadowsocks.</p>
<p>Rumor has it that the censorship is fighting against shadowsocks, but I believe that <strong>technology and science commit no crime</strong>. I am not good at memorization, so I recorded my building steps for further reference.</p>
<h2 id="How-to-Make-it"><a href="#How-to-Make-it" class="headerlink" title="How to Make it?"></a>How to Make it?</h2><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>An Internet hosting, such as VPS or cloud hosting, and nothing more. DigitalOcean’s VPS service is  good enough for me. I would not like to discuss the choosing of hosting service here.</p>
<p>My DigitalOcean VPS is installed with Ubuntu 16.04 LTS x64. The tutorial will also based on it.</p>
<h3 id="Install-pip"><a href="#Install-pip" class="headerlink" title="Install pip"></a>Install pip</h3><p>I am building with python3, so I need pip for python3. Omit it if you have installed it.</p>
<pre><code>$ sudo apt-get update
$ sudo apt-get install python3-pip</code></pre>
<h3 id="Install-shadowsocks"><a href="#Install-shadowsocks" class="headerlink" title="Install shadowsocks"></a>Install shadowsocks</h3><p>The author of shadowsocks stopped the maintenance in official pip, so we get the latest version via git.</p>
<pre><code>$ sudo pip3 install git+https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks.git@master</code></pre>
<p>To look up the version of shadowsocks, we should use this command:</p>
<pre><code>$ sudo ssserver --version</code></pre>
<p>If shadowsocks has been installed successfully, it should show this:</p>
<pre><code>Shadowsocks 3.0.0</code></pre>
<h3 id="Implement-Safer-Encryption-Method-optional"><a href="#Implement-Safer-Encryption-Method-optional" class="headerlink" title="Implement Safer Encryption Method (optional)"></a>Implement Safer Encryption Method (optional)</h3><p>According to the <a href="https://github.com/shadowsocks/shadowsocks/wiki/Encryption" target="_blank" rel="external">introduction</a> of encryption:</p>
<blockquote>
<p><code>rc4-md5</code> is a safe, fast encryption that use different key per connection. It is recommended for OpenWRT routers.</p>
<p><code>salsa20</code> and <code>chacha20</code> are fast stream ciphers. Optimized <code>salsa20</code> implementation on x86_64 is even 2x faster than <code>rc4</code> (but slightly slower on ARM).</p>
</blockquote>
<p>For me, I chose chacha20 as my encryption method. Let’s install the requirements:</p>
<pre><code>$ sudo apt-get install python-m2crypto
$ sudo apt-get install build-essential
$ wget https:&#x2F;&#x2F;github.com&#x2F;jedisct1&#x2F;libsodium&#x2F;releases&#x2F;download&#x2F;1.0.13&#x2F;libsodium-1.0.13.tar.gz
$ sudo tar xf libsodium-1.0.13.tar.gz &amp;&amp; cd libsodium-1.0.13
$ sudo .&#x2F;configure &amp;&amp; sudo make -j2
$ sudo make install
$ sudo ldconfig</code></pre>
<h3 id="Work-with-Configuration-File"><a href="#Work-with-Configuration-File" class="headerlink" title="Work with Configuration File"></a>Work with Configuration File</h3><p>To configure the shadowsocks, we create a configuration file:</p>
<pre><code>$ sudo vim &#x2F;etc&#x2F;shadowsocks.json</code></pre>
<p>Then we fill our configuration with details: (do not forget to change the ports and passwords)</p>
<pre><code>{
    &quot;server&quot;: &quot;::&quot;,
    &quot;local_address&quot;: &quot;127.0.0.1&quot;,
    &quot;local_port&quot;: 1080,
    &quot;port_password&quot;: {
         &quot;10001&quot;: &quot;password1&quot;,
         &quot;10002&quot;: &quot;password2&quot; 
    },
    &quot;timeout&quot;: 300,
    &quot;method&quot;: &quot;chacha20&quot;,
    &quot;fast_open&quot;: false
}</code></pre>
<p>We set the value of <code>server</code> to <code>::</code> in order to ask shadowsocks to receive the traffic from both IPv4 and <strong>IPv6</strong>. <code>method</code> means the encryption method you want shadowsocks to arm with. And <code>fast_open</code> field will be discuss later in the optimization.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>To run shadowsocks in the background:</p>
<pre><code>$ sudo ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start</code></pre>
<p>To stop it:</p>
<pre><code>$ sudo ssserver -d stop</code></pre>
<h3 id="Run-with-Startup"><a href="#Run-with-Startup" class="headerlink" title="Run with Startup"></a>Run with Startup</h3><p>Ubuntu 16.04 introduced a new module named Systemd to manage system and service. We are using the fresh features here.</p>
<p>Create the management file of shadowsocks:</p>
<pre><code>$ sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;shadowsocks-server.service</code></pre>
<p>Then paste the configuration:</p>
<pre><code>[Unit]
Description = Shadowsocks Server
After = network.target

[Service]
ExecStart = &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks.json
Restart = on-abort

[Install]
WantedBy = multi-user.target</code></pre>
<p>So now we get a new approach to run shadowsocks:</p>
<pre><code>$ sudo systemctl start shadowsocks-server</code></pre>
<p>Make shadowsocks run with startup in case of accidentally crash and reboot:</p>
<pre><code>$ sudo systemctl enable shadowsocks-server</code></pre>
<h2 id="Optimizations"><a href="#Optimizations" class="headerlink" title="Optimizations"></a>Optimizations</h2><p>Here are some trick to optimize the performance of shadowsocks.</p>
<h3 id="Enable-BBR"><a href="#Enable-BBR" class="headerlink" title="Enable BBR"></a>Enable BBR</h3><p>BBR stands for a brand new congestion control algorithm developed by Google. It can boost our server to a large extent.</p>
<h4 id="Update-Linux-Kernel"><a href="#Update-Linux-Kernel" class="headerlink" title="Update Linux Kernel"></a>Update Linux Kernel</h4><p>BBR is impossible to enable as long as Linux kernel version is lower than 4.9.0. So firstly let’s check the version of kernel:</p>
<pre><code>$ uname -r</code></pre>
<p>If it shows a version compatible with BBR, please skip to “Edit Configuration”.</p>
<p>Go to a temporary download folder with command <code>cd</code> to prepare for kernel. Then download the latest stable kernel from <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="external">kernel PPA webpage</a>. For example, I chose v4.12.4 mainline build for amd64 succeeded:</p>
<pre><code>$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.12.4&#x2F;linux-headers-4.12.4-041204_4.12.4-041204.201707271932_all.deb
$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.12.4&#x2F;linux-headers-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb
$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.12.4&#x2F;linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb</code></pre>
<p>Then we install the kernels we downloaded:</p>
<pre><code>$ sudo dpkg -i *.deb</code></pre>
<p>Then we should <code>reboot</code> and delete the old kernels:</p>
<pre><code>$ sudo purge-old-kernels</code></pre>
<h4 id="Edit-Configuration"><a href="#Edit-Configuration" class="headerlink" title="Edit Configuration"></a>Edit Configuration</h4><p>Let’s check if we have already switched BBR on:</p>
<pre><code>$ sudo lsmod | grep bbr</code></pre>
<p>If there is not <code>tcp_bbr</code> in the results, we follow this to enable it:</p>
<pre><code>$ sudo echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf
$ sudo echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</code></pre>
<p>Then we save the configuration and make it go into effort:</p>
<pre><code>$ sudo sysctl -p</code></pre>
<h4 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h4><pre><code>$ sysctl net.ipv4.tcp_available_congestion_control
$ sysctl net.ipv4.tcp_congestion_control</code></pre>
<p>If the results both contain <code>bbr</code>, we are sure that BBR has been enabled.</p>
<h3 id="Optimize-I-O"><a href="#Optimize-I-O" class="headerlink" title="Optimize I/O"></a>Optimize I/O</h3><p>To make it, we create a configuration file:</p>
<pre><code>$ sudo vim &#x2F;etc&#x2F;sysctl.d&#x2F;local.conf</code></pre>
<p>Then we fill it with some settings:</p>
<pre><code># max open files
fs.file-max = 51200
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096

# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1

# for low-latency network, use cubic instead
# net.ipv4.tcp_congestion_control = cubic</code></pre>
<p>Then we make it come into effort:</p>
<pre><code>$ sudo sysctl --system</code></pre>
<p>Then edit the <code>shadowsocks-server.service</code> file above:</p>
<pre><code>$ sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;shadowsocks-server.service</code></pre>
<p>Insert a line before <code>ExecStart</code>:</p>
<pre><code>ExecStartPre = &#x2F;bin&#x2F;sh -c &#39;ulimit -n 51200&#39;</code></pre>
<p>Overall <code>shadowsocks-server.service</code>:</p>
<pre><code>[Unit]
Description = Shadowsocks Server
After = network.target

[Service]
ExecStartPre = &#x2F;bin&#x2F;sh -c &#39;ulimit -n 51200&#39;
ExecStart = &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks.json
Restart = on-abort

[Install]
WantedBy = multi-user.target</code></pre>
<p>Make them come into effort:</p>
<pre><code>$ sudo systemctl daemon-reload
$ sudo systemctl restart shadowsocks-server</code></pre>
<h3 id="Enable-TCP-Fast-Open"><a href="#Enable-TCP-Fast-Open" class="headerlink" title="Enable TCP Fast Open"></a>Enable TCP Fast Open</h3><p>TCP Fast Open is designed to reduce delay between server and clients. Now it is the time to enable it.</p>
<p>Edit our shadowsocks configuration file:</p>
<pre><code>$ sudo vim &#x2F;etc&#x2F;shadowsocks.json</code></pre>
<p>Then we set the value of <code>fast_open</code> to <code>true</code>. Restart shadowsocks to validate your changes.</p>
<pre><code>$ sudo systemctl restart shadowsocks-server</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;As a Chinese university student, I am enjoying a special-designed Internet as we all know. Needless to say that it is especially difficult for me to accomplish my research with Google or Wikipedia. Additionally, my university is using a tolling network, whose Internet fee is about $0.3/GB. It is not a big deal but it bothered me anyway.&lt;/p&gt;
&lt;p&gt;Despite the inconvenience discussed above, it is totally free to get online through IPv6. Apparently, if I convert my IPv4 network traffic into IPv6 one and introduce a hosting server to agent it, all problem will be settled.&lt;/p&gt;
&lt;p&gt;In a nutshell, I am going to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get online &lt;strong&gt;free&lt;/strong&gt; (free of charge) through IPv6;&lt;/li&gt;
&lt;li&gt;reach out for &lt;strong&gt;free&lt;/strong&gt; (unrestricted) Internet;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://pingchuan.ma/categories/tutorial/"/>
    
    
      <category term="IPv6" scheme="https://pingchuan.ma/tags/ipv6/"/>
    
      <category term="Python" scheme="https://pingchuan.ma/tags/python/"/>
    
      <category term="Linux" scheme="https://pingchuan.ma/tags/linux/"/>
    
      <category term="Shadowsocks" scheme="https://pingchuan.ma/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pingchuan.ma/hello-world/"/>
    <id>https://pingchuan.ma/hello-world/</id>
    <published>2017-08-02T15:04:10.000Z</published>
    <updated>2017-08-04T09:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>This is my first post!</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;This is my first post!&lt;/em&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Uncategorized" scheme="https://pingchuan.ma/categories/uncategorized/"/>
    
    
  </entry>
  
</feed>
