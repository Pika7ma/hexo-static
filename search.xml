<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Free Free Internet]]></title>
    <url>%2Ffree-free-internet%2F</url>
    <content type="text"><![CDATA[IntroductionAs a Chinese university student, I am enjoying a special-designed Internet as we all know. Needless to say that it is especially difficult for me to accomplish my research with Google or Wikipedia. Additionally, my university is using a tolling network, whose Internet fee is about $0.3/GB. It is not a big deal but it bothered me anyway. Despite the inconvenience discussed above, it is totally free to get online through IPv6. Apparently, if I convert my IPv4 network traffic into IPv6 one and introduce a hosting server to agent it, all problem will be settled. In a nutshell, I am going to: get online free (free of charge) through IPv6; reach out for free (unrestricted) Internet; What is Shadowsocks?According to its GitHub description, shadowsocks works as a fast tunnel proxy with several friendly features: TCP &amp; UDP support User management API TCP Fast Open Workers and graceful restart Destination IP blacklist As for many people, this multi-featured tool plays an indispensable role in research and study. In particular, it serves me well in network testing and website boosting. Why Shadowsocks?Technically speaking, I did not really figure out how it works. However, to my experience, shadowsocks can maximum my network securely. Moreover, I find it friendly and easy to build for a Linux newbie like me. As a result, I chose shadowsocks. Rumor has it that the censorship is fighting against shadowsocks, but I believe that technology and science commit no crime. I am not good at memorization, so I recorded my building steps for further reference. How to Make it?RequirementsAn Internet hosting, such as VPS or cloud hosting, and nothing more. DigitalOcean’s VPS service is good enough for me. I would not like to discuss the choosing of hosting service here. My DigitalOcean VPS is installed with Ubuntu 16.04 LTS x64. The tutorial will also based on it. Install pipI am building with python3, so I need pip for python3. Omit it if you have installed it. $ sudo apt-get update $ sudo apt-get install python3-pip Install shadowsocksThe author of shadowsocks stopped the maintenance in official pip, so we get the latest version via git. $ sudo pip3 install git+https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks.git@master To look up the version of shadowsocks, we should use this command: $ sudo ssserver --version If shadowsocks has been installed successfully, it should show this: Shadowsocks 3.0.0 Implement Safer Encryption Method (optional)According to the introduction of encryption: rc4-md5 is a safe, fast encryption that use different key per connection. It is recommended for OpenWRT routers. salsa20 and chacha20 are fast stream ciphers. Optimized salsa20 implementation on x86_64 is even 2x faster than rc4 (but slightly slower on ARM). For me, I chose chacha20 as my encryption method. Let’s install the requirements: $ sudo apt-get install python-m2crypto $ sudo apt-get install build-essential $ wget https:&#x2F;&#x2F;github.com&#x2F;jedisct1&#x2F;libsodium&#x2F;releases&#x2F;download&#x2F;1.0.13&#x2F;libsodium-1.0.13.tar.gz $ sudo tar xf libsodium-1.0.13.tar.gz &amp;&amp; cd libsodium-1.0.13 $ sudo .&#x2F;configure &amp;&amp; sudo make -j2 $ sudo make install $ sudo ldconfig Work with Configuration FileTo configure the shadowsocks, we create a configuration file: $ sudo vim &#x2F;etc&#x2F;shadowsocks.json Then we fill our configuration with details: (do not forget to change the ports and passwords) { &quot;server&quot;: &quot;::&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;port_password&quot;: { &quot;10001&quot;: &quot;password1&quot;, &quot;10002&quot;: &quot;password2&quot; }, &quot;timeout&quot;: 300, &quot;method&quot;: &quot;chacha20&quot;, &quot;fast_open&quot;: false } We set the value of server to :: in order to ask shadowsocks to receive the traffic from both IPv4 and IPv6. method means the encryption method you want shadowsocks to arm with. And fast_open field will be discuss later in the optimization. UsageTo run shadowsocks in the background: $ sudo ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start To stop it: $ sudo ssserver -d stop Run with StartupUbuntu 16.04 introduced a new module named Systemd to manage system and service. We are using the fresh features here. Create the management file of shadowsocks: $ sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;shadowsocks-server.service Then paste the configuration: [Unit] Description = Shadowsocks Server After = network.target [Service] ExecStart = &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks.json Restart = on-abort [Install] WantedBy = multi-user.target So now we get a new approach to run shadowsocks: $ sudo systemctl start shadowsocks-server Make shadowsocks run with startup in case of accidentally crash and reboot: $ sudo systemctl enable shadowsocks-server OptimizationsHere are some trick to optimize the performance of shadowsocks. Enable BBRBBR stands for a brand new congestion control algorithm developed by Google. It can boost our server to a large extent. Update Linux KernelBBR is impossible to enable as long as Linux kernel version is lower than 4.9.0. So firstly let’s check the version of kernel: $ uname -r If it shows a version compatible with BBR, please skip to “Edit Configuration”. Go to a temporary download folder with command cd to prepare for kernel. Then download the latest stable kernel from kernel PPA webpage. For example, I chose v4.12.4 mainline build for amd64 succeeded: $ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.12.4&#x2F;linux-headers-4.12.4-041204_4.12.4-041204.201707271932_all.deb $ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.12.4&#x2F;linux-headers-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb $ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.12.4&#x2F;linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb Then we install the kernels we downloaded: $ sudo dpkg -i *.deb Then we should reboot and delete the old kernels: $ sudo purge-old-kernels Edit ConfigurationLet’s check if we have already switched BBR on: $ sudo lsmod | grep bbr If there is not tcp_bbr in the results, we follow this to enable it: $ sudo echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf $ sudo echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf Then we save the configuration and make it go into effort: $ sudo sysctl -p Validate$ sysctl net.ipv4.tcp_available_congestion_control $ sysctl net.ipv4.tcp_congestion_control If the results both contain bbr, we are sure that BBR has been enabled. Optimize I/OTo make it, we create a configuration file: $ sudo vim &#x2F;etc&#x2F;sysctl.d&#x2F;local.conf Then we fill it with some settings: # max open files fs.file-max = 51200 # max read buffer net.core.rmem_max = 67108864 # max write buffer net.core.wmem_max = 67108864 # default read buffer net.core.rmem_default = 65536 # default write buffer net.core.wmem_default = 65536 # max processor input queue net.core.netdev_max_backlog = 4096 # max backlog net.core.somaxconn = 4096 # resist SYN flood attacks net.ipv4.tcp_syncookies = 1 # reuse timewait sockets when safe net.ipv4.tcp_tw_reuse = 1 # turn off fast timewait sockets recycling net.ipv4.tcp_tw_recycle = 0 # short FIN timeout net.ipv4.tcp_fin_timeout = 30 # short keepalive time net.ipv4.tcp_keepalive_time = 1200 # outbound port range net.ipv4.ip_local_port_range = 10000 65000 # max SYN backlog net.ipv4.tcp_max_syn_backlog = 4096 # max timewait sockets held by system simultaneously net.ipv4.tcp_max_tw_buckets = 5000 # turn on TCP Fast Open on both client and server side net.ipv4.tcp_fastopen = 3 # TCP receive buffer net.ipv4.tcp_rmem = 4096 87380 67108864 # TCP write buffer net.ipv4.tcp_wmem = 4096 65536 67108864 # turn on path MTU discovery net.ipv4.tcp_mtu_probing = 1 # for low-latency network, use cubic instead # net.ipv4.tcp_congestion_control = cubic Then we make it come into effort: $ sudo sysctl --system Then edit the shadowsocks-server.service file above: $ sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;shadowsocks-server.service Insert a line before ExecStart: ExecStartPre = &#x2F;bin&#x2F;sh -c &#39;ulimit -n 51200&#39; Overall shadowsocks-server.service: [Unit] Description = Shadowsocks Server After = network.target [Service] ExecStartPre = &#x2F;bin&#x2F;sh -c &#39;ulimit -n 51200&#39; ExecStart = &#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks.json Restart = on-abort [Install] WantedBy = multi-user.target Make them come into effort: $ sudo systemctl daemon-reload $ sudo systemctl restart shadowsocks-server Enable TCP Fast OpenTCP Fast Open is designed to reduce delay between server and clients. Now it is the time to enable it. Edit our shadowsocks configuration file: $ sudo vim &#x2F;etc&#x2F;shadowsocks.json Then we set the value of fast_open to true. Restart shadowsocks to validate your changes. $ sudo systemctl restart shadowsocks-server]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>IPv6</tag>
        <tag>Python</tag>
        <tag>Linux</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[This is my first post!]]></content>
      <categories>
        <category>Uncategorized</category>
      </categories>
  </entry>
</search>